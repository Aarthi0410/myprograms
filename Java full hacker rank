import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

interface IProduct {
    String getProductId();
    void setProductId(String productId);
    int getSalesVelocity();
    void setSalesVelocity(int salesVelocity);
    int getStockLevel();
    void setStockLevel(int stockLevel);
}


class Product implements IProduct {
    String productId;
    int salesVelocity;
    int stockLevel;
    
    public Product(String productId, int salesVelocity, int stockLevel) {
        this.productId = productId;
        this.salesVelocity = salesVelocity;
        this.stockLevel = stockLevel;
    }
    
    public String getProductId() {
        return productId;
    }

    
    public void setProductId(String productId) {
        this.productId = productId;
    }
    
    public int getSalesVelocity() {
        return salesVelocity;
    }

    public void setSalesVelocity(int salesVelocity) {
        this.salesVelocity = salesVelocity;
    }
    
    public int getStockLevel() {
        return stockLevel;
    }

    
    public void setStockLevel(int stockLevel) {
        this.stockLevel = stockLevel;
    }
    
    
}

class InventoryClearance {
    public static List<String> identifyClearanceItems(List<Product> products){
        List<String> clearProduct = new ArrayList<>();
        for(Product product: products){
            if(product.getStockLevel()>=product.getSalesVelocity()*10){
                clearProduct.add(product.getProductId());
            }
        }
        return clearProduct;
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int N = Integer.parseInt(scanner.nextLine().trim());
        List<Product> products = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            String[] productDetails = scanner.nextLine().trim().split(" ");
            String productId = productDetails[0];
            int salesVelocity = Integer.parseInt(productDetails[1]);
            int stockLevel = Integer.parseInt(productDetails[2]);
            products.add(new Product(productId, salesVelocity, stockLevel));
        }

        List<String> clearanceItems = InventoryClearance.identifyClearanceItems(products);

        clearanceItems.forEach(System.out::println);
    }
}
